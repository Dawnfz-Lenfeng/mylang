// Test complex break and continue scenarios

// Test 1: Multiple breaks and continues in same loop
let count = 0;
let processed_items = 0;
let skipped_items = 0;
while count < 10 {
    count += 1;
    
    if count == 2 {
        skipped_items += 1;
        continue;
    }
    
    if count == 5 {
        skipped_items += 1;
        continue;
    }
    
    if count == 8 {
        break;
    }
    
    processed_items += 1;
}
assert(count == 8, "Loop should break at count = 8");
assert(processed_items == 5, "Should process 5 items (1,3,4,6,7)");
assert(skipped_items == 2, "Should skip 2 items (2,5)");

// Test 2: Break and continue with function calls
fn should_skip(n) {
    return n == 3 or n == 6;
}

fn should_break(n) {
    return n > 7;
}

let num = 0;
let function_processed = 0;
while num < 10 {
    num += 1;
    
    if should_skip(num) {
        continue;
    }
    
    if should_break(num) {
        break;
    }
    
    function_processed += 1;
}
assert(num == 8, "Function-based loop should break at num = 8");
assert(function_processed == 5, "Should process 5 numbers (1,2,4,5,7)");

// Test 3: Deeply nested with mixed break/continue
let outer_iterations = 0;
let middle_skips = 0;
let inner_breaks = 0;
let total_values = 0;

let outer = 0;
while outer < 3 {
    outer += 1;
    outer_iterations += 1;
    
    let middle = 0;
    while middle < 4 {
        middle += 1;
        
        if middle == 2 {
            middle_skips += 1;
            continue; // Skip middle == 2
        }
        
        let inner = 0;
        while inner < 3 {
            inner += 1;
            
            if inner == 2 and middle == 3 {
                inner_breaks += 1;
                break;
            }
            
            total_values += 1;
        }
        
        if middle == 3 {
            break;
        }
    }
}

assert(outer_iterations == 3, "Should complete 3 outer iterations");
assert(middle_skips == 3, "Should skip middle=2 three times");
assert(inner_breaks == 3, "Should break inner loop 3 times at middle=3, inner=2");
assert(total_values == 15, "Should process correct number of values");

print "All complex break/continue tests passed!";
