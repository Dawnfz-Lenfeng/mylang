// Test edge cases and boundary conditions

// Test empty function
fn empty_function() {
}

let result = empty_function();
assert(result == nil, "Empty function should return nil");

// Test zero and negative numbers
let zero = 0;
let negative = -42;
assert(zero == 0, "Zero should equal 0");
assert(negative == -42, "Negative should equal -42");
assert(-zero == 0, "Negative zero should be 0");

// Test boolean operations
assert((true and true) == true, "true AND true should be true");
assert((true and false) == false, "true AND false should be false");
assert((false or true) == true, "false OR true should be true");
assert((!true) == false, "NOT true should be false");
assert((!false) == true, "NOT false should be true");

// Test string operations
let empty_string = "";
let space = " ";
assert(len(empty_string) == 0, "Empty string should have length 0");
assert(len(space) == 1, "Space should have length 1");
assert(empty_string != space, "Empty string should not equal space");

// Test nested block scoping
let outer_var = "outer";
{
    let a = 1;
    assert(a == 1, "Block variable a should be 1");
    assert(outer_var == "outer", "Should access outer variable");
    {
        let b = 2;
        assert(b == 2, "Nested block variable b should be 2");
        assert(a == 1, "Should still access a from parent block");
        {
            let c = 3;
            assert(c == 3, "Deep nested variable c should be 3");
            assert(b == 2, "Should access b from outer block");
            assert(a == 1, "Should access a from outermost block");
        }
    }
}

// Test multiple returns in function
fn multiple_returns(condition) {
    if condition {
        return "early return";
    }
    
    // This should execute for false condition
    let executed = true;
    
    if !condition {
        return "second return";
    }
    
    return "default return";
}

assert(multiple_returns(true) == "early return", "Should return early for true");
assert(multiple_returns(false) == "second return", "Should return second for false");

// Test nil comparisons
assert(nil == nil, "nil should equal nil");
assert(nil != 0, "nil should not equal 0");
assert(nil != false, "nil should not equal false");
assert(nil != "", "nil should not equal empty string");

// Test arithmetic edge cases
assert(0 * 42 == 0, "Zero multiplication should be 0");
assert(1 * 42 == 42, "Identity multiplication should work");
assert(42 + 0 == 42, "Adding zero should not change value");
assert(42 - 0 == 42, "Subtracting zero should not change value");

print "All edge case tests passed!";
