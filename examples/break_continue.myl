// Test break statement
let i = 0;
let iterations = 0;
while i < 10 {
    if i == 3 {
        break;
    }
    iterations += 1;
    i += 1;
}
assert(i == 3, "Break should stop loop at i = 3");
assert(iterations == 3, "Should have 3 iterations before break");

// Test continue statement
let j = 0;
let processed = 0;
while j < 5 {
    j += 1;
    if j == 3 {
        continue;
    }
    processed += 1;
}
assert(j == 5, "Continue should not affect loop counter");
assert(processed == 4, "Should process 4 items (skip j=3)");

// Test nested loops with break
let outer_count = 0;
let inner_break_count = 0;
let x = 0;
while x < 3 {
    let y = 0;
    while y < 3 {
        if y == 1 {
            inner_break_count += 1;
            break; // Only breaks inner loop
        }
        y += 1;
    }
    outer_count += 1;
    x += 1;
}
assert(outer_count == 3, "Outer loop should complete 3 times");
assert(inner_break_count == 3, "Inner break should occur 3 times");

// Test nested loops with continue
let continue_count = 0;
let total_inner_iterations = 0;
let a = 0;
while a < 2 {
    let b = 0;
    while b < 3 {
        b += 1;
        total_inner_iterations += 1;
        if b == 2 {
            continue_count += 1;
            continue; // Only continues inner loop
        }
    }
    a += 1;
}
assert(continue_count == 2, "Continue should occur 2 times");
assert(total_inner_iterations == 6, "Should have 6 total inner iterations");

print "All break/continue tests passed!";