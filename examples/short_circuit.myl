// Test short circuit evaluation behavior
let call_count = 0;

fn side_effect_true() {
    call_count += 1;
    return true;
}

fn side_effect_false() {
    call_count += 1;
    return false;
}

// Test AND short circuit: false AND anything should not evaluate second operand
call_count = 0;
let result1 = false and side_effect_true();
assert(result1 == false, "false AND anything should be false");
assert(call_count == 0, "false AND should short-circuit (not call second operand)");

// Test AND no short circuit: true AND something should evaluate second operand
call_count = 0;
let result2 = true and side_effect_true();
assert(result2 == true, "true AND true should be true");
assert(call_count == 1, "true AND should evaluate second operand");

// Test OR short circuit: true OR anything should not evaluate second operand
call_count = 0;
let result3 = true or side_effect_true();
assert(result3 == true, "true OR anything should be true");
assert(call_count == 0, "true OR should short-circuit (not call second operand)");

// Test OR no short circuit: false OR something should evaluate second operand
call_count = 0;
let result4 = false or side_effect_true();
assert(result4 == true, "false OR true should be true");
assert(call_count == 1, "false OR should evaluate second operand");

// Test complex AND chain with short circuit
call_count = 0;
let result5 = true and side_effect_false() and side_effect_true();
assert(result5 == false, "true AND false AND anything should be false");
assert(call_count == 1, "Should stop after first false in AND chain");

// Test complex OR chain with short circuit
call_count = 0;
let result6 = false or side_effect_true() or side_effect_false();
assert(result6 == true, "false OR true OR anything should be true");
assert(call_count == 1, "Should stop after first true in OR chain");

// Test variable assignment in short-circuited expression
let assigned = false;
let result7 = false and (assigned = true);
assert(result7 == false, "false AND assignment should be false");
assert(assigned == false, "Assignment should not execute in short-circuited AND");

// Test variable assignment in short-circuited OR
assigned = false;
let result8 = true or (assigned = true);
assert(result8 == true, "true OR assignment should be true");
assert(assigned == false, "Assignment should not execute in short-circuited OR");

// Test that non-short-circuited assignments do execute
assigned = false;
let result9 = false or (assigned = true);
assert(result9 == true, "false OR assignment should be true");
assert(assigned == true, "Assignment should execute in non-short-circuited OR");

// Test mixed short circuit scenarios
call_count = 0;
let result10 = (true and side_effect_true()) or side_effect_false();
assert(result10 == true, "Mixed expression should be true");
assert(call_count == 1, "Should evaluate first part but short-circuit OR");

call_count = 0;
let result11 = (false or side_effect_true()) and side_effect_true();
assert(result11 == true, "Mixed expression should be true");
assert(call_count == 2, "Should evaluate both parts of OR, then short-circuit AND");


// Test short circuit with return values (not just boolean)
// LogicalAnd should return left value if falsy, right value if left is truthy
let result12 = 0 and 42;
assert(result12 == 0, "0 AND 42 should return 0 (falsy left value)");

let result13 = 5 and 42;
assert(result13 == 42, "5 AND 42 should return 42 (right value when left is truthy)");

let result14 = nil and "hello";
assert(result14 == nil, "nil AND string should return nil");

let result15 = "hello" and "world";
assert(result15 == "world", "string AND string should return second string");

// LogicalOr should return left value if truthy, right value if left is falsy
let result16 = 0 or 42;
assert(result16 == 42, "0 OR 42 should return 42 (right value when left is falsy)");

let result17 = 5 or 42;
assert(result17 == 5, "5 OR 42 should return 5 (truthy left value)");

let result18 = nil or "hello";
assert(result18 == "hello", "nil OR string should return string");

let result19 = "hello" or "world";
assert(result19 == "hello", "string OR string should return first string");

// Test with arrays
let arr1 = [1, 2, 3];
let arr2 = [4, 5, 6];
let result20 = arr1 and arr2;
assert(result20 == arr2, "non-empty array AND array should return second array");

let empty_arr = [];
let result21 = empty_arr or arr1;
assert(result21 == arr1, "empty array OR non-empty should return non-empty array");

// Test chaining with different types
let result22 = 0 or nil or "fallback";
assert(result22 == "fallback", "Should return first truthy value in OR chain");

let result23 = "first" and 42 and true;
assert(result23 == true, "Should return last value in AND chain when all truthy");

let result24 = "first" and 0 and "never reached";
assert(result24 == 0, "Should return first falsy value in AND chain");

print "All short-circuit evaluation tests passed!";
